{"version":3,"sources":["ValidatePin/Index.jsx","ValidatePin/function.js","PersistentBugger/Index.jsx","PersistentBugger/function.js","MissingLetter/Index.jsx","MissingLetter/function.js","ArrayDiff/Index.jsx","ArrayDiff/function.js","App.js","index.js"],"names":["Index","useState","pin","error","response","state","setState","className","onSubmit","e","preventDefault","resp","isNaN","includes","trim","length","htmlFor","type","id","onChange","target","value","JSON","stringify","num","result","ronda","init","String","split","forEach","n","parseInt","persistence","console","log","array","letters","firstElement","lastElement","lettersSet","onlyLetters","RegExp","upper","Array","isArray","test","l","i","toUpperCase","indexOf","lastIndexOf","push","findMissingLetter","set1","set2","handleChange","name","filter","j","arrayDiff","App","view","setView","onSelect","active","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c50cdd2e.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { validatePIN } from './function';\r\n\r\nconst Index = () => {\r\n\r\n    const [state, setState] = useState({\r\n        pin: null,\r\n        error: null,\r\n        response: null\r\n    })\r\n\r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault();\r\n        const resp = validatePIN( state.pin );\r\n        setState( resp )\r\n    }\r\n\r\n    const handleChange = ({target}) => setState( {...state, pin: target.value })\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <form className=\"row g-3\" onSubmit={ handleSubmit }>\r\n                <div className=\"col-12\">\r\n                    <p> \r\n                        <b>Validate Pin</b> <br /> \r\n                        ATM machines allow 4 or 6 digit PIN codes and PIN codes cannot contain anything but exactly 4 digits or exactly 6 digits. \r\n                    </p>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <label htmlFor=\"pincode\"><b>PIN code</b></label>\r\n                    <input type=\"text\" className=\"form-control my-3\" id=\"pincode\" onChange={ handleChange } />\r\n                    <button type=\"submit\" className=\"btn btn-primary \">Send</button>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <b>Response</b>\r\n                    <pre>\r\n                        <code data-lang=\"html\">\r\n                            { JSON.stringify( state, null, 2 )  }\r\n                        </code>\r\n                    </pre>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Index","\r\nexport const validatePIN = ( pin ) => {\r\n\r\n    if ( !pin ) {\r\n        return { \r\n            pin: `${pin}`.trim(),\r\n            response: false,\r\n            error: \"Pin code are required\" \r\n        }\r\n    }\r\n    if ( isNaN(pin) ) {\r\n        return {\r\n            pin: `${pin}`.trim(),\r\n            response: false,\r\n            error: \"Only numbers are acepted\" \r\n        }\r\n    }\r\n    if ( pin.includes('.' || 'e' ) ) {\r\n        return {\r\n            pin: `${pin}`.trim(),\r\n            response: false,\r\n            error: \"Only numbers are acepted\" \r\n        }\r\n    }\r\n    if ( (`${pin}`).trim().length === 4 || (`${pin}`).trim().length === 6 ) {\r\n        return {\r\n            pin: `${pin}`.trim(),\r\n            response: true,\r\n            error: null \r\n        }\r\n    } else {\r\n        return { \r\n            pin: `${pin}`.trim(),\r\n            response: false,\r\n            error: \"The pin code can only be 4 or 6 numbers long\" \r\n        }\r\n    }\r\n\r\n}","import React, { useState } from 'react'\r\nimport { persistence } from './function';\r\n\r\nconst Index = () => {\r\n\r\n    const [state, setState] = useState({\r\n        num: null,\r\n        error: null,\r\n        response: null\r\n    })\r\n \r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault();\r\n        const resp = persistence( 4 );\r\n        console.log( resp );\r\n        // const resp = persistence( state.num );\r\n        setState( resp )\r\n    }\r\n\r\n    const handleChange = ({target}) => setState( {...state, num: target.value })\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <form className=\"row g-3\" onSubmit={ handleSubmit }>\r\n                <div className=\"col-12\">\r\n                    <p> \r\n                        <b>Persistent Bugger</b> <br /> \r\n                        Write a function, persistence, that takes in a positive parameter num and returns its multiplicative persistence, which is the number of times you must multiply the digits in num until you reach a single digit. \r\n                    </p>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <label htmlFor=\"number\"><b>Number</b></label>\r\n                    <input type=\"text\" className=\"form-control my-3\" id=\"number\" onChange={ handleChange } />\r\n                    <button type=\"submit\" className=\"btn btn-primary \">Send</button>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <b>Response</b>\r\n                    <pre>\r\n                        <code data-lang=\"html\">\r\n                            { JSON.stringify( state, null, 2 )  }\r\n                        </code>\r\n                    </pre>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Index","\r\nexport const persistence = ( num ) => {\r\n\r\n    let result = 1; \r\n    let ronda = 0; \r\n    let init = num; \r\n\r\n    if ( !num ) {\r\n        return { \r\n            num: num,\r\n            response: false,\r\n            error: \"Number are required\" \r\n        }\r\n    }\r\n    if ( num < 0 ) {\r\n        return {\r\n            num: num,\r\n            response: false,\r\n            error: \"Only positive numbers are acepted\" \r\n        }\r\n    }\r\n    if ( isNaN(num) ) {\r\n        return {\r\n            num: num,\r\n            response: false,\r\n            error: \"Only numbers are acepted\" \r\n        }\r\n    }\r\n    if ( num < 9 ) {\r\n        return {\r\n            num: num,\r\n            response: 0,\r\n            error: null\r\n        }\r\n    }\r\n    \r\n    do {\r\n        String(num).split('').forEach( n => result = result * parseInt(n));\r\n        ronda += 1;\r\n        num = result;\r\n        result = 1;\r\n    } while ( num > 9 && num > 0 );\r\n\r\n    return {\r\n        num: init,\r\n        response: ronda,\r\n        error: null\r\n    }\r\n}\r\n","import React, { useState } from 'react'\r\nimport { findMissingLetter } from './function';\r\n\r\nconst Index = () => {\r\n\r\n    const [state, setState] = useState({\r\n        array: [],\r\n        error: null,\r\n        response: null\r\n    })\r\n\r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault();\r\n        const resp = findMissingLetter( state.array.split('') );\r\n        setState( resp )\r\n    }\r\n\r\n    const handleChange = ({target}) => setState( {...state, array: target.value })\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <form className=\"row g-3\" onSubmit={ handleSubmit }>\r\n                <div className=\"col-12\">\r\n                    <p> \r\n                        <b>Find the missing letter</b> <br /> \r\n                        Write a method that takes an array of consecutive (increasing) letters as input and that returns the missing letter in the array. You will always get an valid array. And it will be always exactly one letter be missing. The length of the array will always be at least 2. The array will always contain letters in only one case. (Use the English alphabet with 26 letters!)\r\n                    </p>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <label htmlFor=\"letters\"><b>Letters</b></label>\r\n                    <input type=\"text\" className=\"form-control my-3\" id=\"letters\" onChange={ handleChange } />\r\n                    <button type=\"submit\" className=\"btn btn-primary \">Send</button>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <b>Response</b>\r\n                    <pre>\r\n                        <code data-lang=\"html\">\r\n                            { JSON.stringify( state, null, 2 )  }\r\n                        </code>\r\n                    </pre>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Index","\r\nexport const findMissingLetter = ( letters ) => {\r\n\r\n    const lettersSet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\r\n    const onlyLetters = new RegExp('^[a-z]+', 'i');\r\n    const upper = new RegExp('^[A-Z]+');\r\n    let firstElement, lastElement = null;\r\n    let result = [];\r\n\r\n\r\n    if ( !letters || !Array.isArray(letters) ) {\r\n        return { \r\n            array: letters,\r\n            response: false,\r\n            error: \"Array required\" \r\n        }\r\n    }\r\n    if ( letters.length < 2 ) {\r\n        return {\r\n            array: letters,\r\n            response: false,\r\n            error: \"Array 2 characters long min\" \r\n        }\r\n    }\r\n    if ( !onlyLetters.test( letters ) ) {\r\n        return {\r\n            array: letters,\r\n            response: false,\r\n            error: \"Only letters\" \r\n        }\r\n    }\r\n    if ( upper.test( letters ) ) {\r\n        lettersSet.forEach( (l,i) => lettersSet[i] = l.toUpperCase() )\r\n    }\r\n\r\n    firstElement = lettersSet.indexOf( letters[0] );\r\n    lastElement = lettersSet.lastIndexOf( letters[letters.length - 1] );\r\n\r\n    lettersSet.forEach( (l,i) => {\r\n        if ( i >= firstElement && i <= lastElement ) {\r\n            if ( !letters.includes( l ) ) {\r\n                result.push( l )\r\n            }\r\n        }\r\n    })\r\n\r\n    return {\r\n        array: letters,\r\n        response: result,\r\n        error: null\r\n    }\r\n}","import React, { useState } from 'react'\r\nimport { arrayDiff } from './function';\r\n\r\nconst Index = () => {\r\n\r\n    const [state, setState] = useState({\r\n        set1: [],\r\n        set2: [],\r\n        error: null,\r\n        response: null\r\n    })\r\n\r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault();\r\n        if ( state.set1.length <= 0 || state.set2.length <= 0 ) {\r\n            return setState({ ...state,\r\n                response: false,\r\n                error: \"Array required\" \r\n            })\r\n        }\r\n        const resp = arrayDiff( state.set1.split(''), state.set2.split('') );\r\n        setState( resp )\r\n    }\r\n\r\n    const handleChange = ({target}) => setState( {...state, [target.name]: target.value })\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <form className=\"row g-3\" onSubmit={ handleSubmit }>\r\n                <div className=\"col-12\">\r\n                    <p> \r\n                        <b> Array difference</b> <br /> \r\n                        Implement a difference function, which subtracts one list from another and returns the result. It should remove all values from list a, which are present in list b keeping their order.\r\n                    </p>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <label htmlFor=\"set1\"><b>Set 1</b></label>\r\n                    <input type=\"text\" className=\"form-control my-3\" id=\"set1\" name=\"set1\" onChange={ handleChange } />\r\n                    <br />\r\n                    <label htmlFor=\"set2\"><b>Set 2</b></label>\r\n                    <input type=\"text\" className=\"form-control my-3\" id=\"set2\" name=\"set2\" onChange={ handleChange } />\r\n                    <button type=\"submit\" className=\"btn btn-primary \">Send</button>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <b>Response</b>\r\n                    <pre>\r\n                        <code data-lang=\"html\">\r\n                            { JSON.stringify( state, null, 2 )  }\r\n                        </code>\r\n                    </pre>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Index","\r\nexport const arrayDiff = ( set1, set2 ) => {\r\n\r\n    let result = [];\r\n\r\n    if ( !set1.length > 0 || !set2.length > 0 ) {\r\n        return { \r\n            set1,\r\n            set2,\r\n            response: false,\r\n            error: \"Array required\" \r\n        }\r\n    }\r\n    if ( !Array.isArray(set1) || !Array.isArray(set2) ) {\r\n        return { \r\n            set1,\r\n            set2,\r\n            response: false,\r\n            error: \"Array required\" \r\n        }\r\n    }\r\n    if ( set1.length < 2 ) {\r\n        return {\r\n            set1,\r\n            set2,\r\n            response: false,\r\n            error: \"Array 2 characters long min\" \r\n        }\r\n    }\r\n    set1.forEach( i => {\r\n        if ( isNaN(i) ) {\r\n            return {\r\n                set1,\r\n                set2,\r\n                response: false,\r\n                error: \"Only numbers are acepted\" \r\n            }\r\n        }\r\n    })\r\n    set2.forEach( i => {\r\n        if ( isNaN(i) ) {\r\n            return {\r\n                set1,\r\n                set2,\r\n                response: false,\r\n                error: \"Only numbers are acepted\" \r\n            }\r\n        }\r\n    })\r\n    \r\n    set2.forEach( i => {\r\n        result = ( result.length > 0 ? result : set1 ).filter( j => {\r\n            if (j !== i ) {\r\n                return i;\r\n            }\r\n        })\r\n    })\r\n\r\n    return {\r\n        set1,\r\n        set2,\r\n        response: result,\r\n        error: null\r\n    }\r\n}","import React, { useState } from 'react'\r\nimport ValidatePin from './ValidatePin/Index'\r\nimport PersistentBugger from './PersistentBugger/Index'\r\nimport MissingLetter from './MissingLetter/Index'\r\nimport ArrayDiff from './ArrayDiff/Index'\r\n\r\nconst App = () => {\r\n\r\n  const [view, setView] = useState(1)\r\n  const onSelect = ( active ) => setView( active );\r\n  return (\r\n    <div className=\"container pt-3\">\r\n      <h1 > Prueba solucion factible </h1>\r\n      <small> Developed by David Ledezma</small>\r\n      <hr />\r\n      <ul className=\"nav\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" onClick={()=>onSelect(1)}> Validate Pin </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" onClick={()=>onSelect(2)}> Persistent Bugger </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" onClick={()=>onSelect(3)}> Find the missing letter </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" onClick={()=>onSelect(4)}> Array.diff </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"content\" className=\"container\">\r\n        { view === 1 && <ValidatePin />}\r\n        { view === 2 && <PersistentBugger />}\r\n        { view === 3 && <MissingLetter />}\r\n        { view === 4 && <ArrayDiff />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render( <App />, document.getElementById('root') );\n"],"sourceRoot":""}